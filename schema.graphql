"""
ECO contract addresses
only ever one entity of this type, with id: "0" which returns the current contract addresses of each attribute
"""
type ContractAddresses @entity {
    id: String!
    policy: String!
    currencyTimer: String!
    timedPolicies: String!
    currencyGovernance: String!
    policyProposals: String!
    policyVotes: String!
    eco: String!
    ecox: String!
    ecoxStaking: String!
    trustedNodes: String!
}


"""
ECO generation
"""
type Generation @entity {
    id: String! "generation number"
    number: BigInt!
    currencyGovernance: CurrencyGovernance! @derivedFrom(field: "generation")
    policyProposal: PolicyProposal @derivedFrom(field: "generation")
    policyVote: PolicyVote @derivedFrom(field: "generation")
    communityProposals: [CommunityProposal!]! @derivedFrom(field: "generation")
    monetaryProposals: [MonetaryProposal!]! @derivedFrom(field: "generation")
}


"""
Currency Governance entities
"""
type CurrencyGovernance @entity {
    id: String! "address"
    generation: Generation!
    proposalEnds: BigInt!
    votingEnds: BigInt!
    revealEnds: BigInt!
    defaultProposalMultiplier: BigInt!
    defaultProposalScore: BigInt!
    defaultProposalEnacted: Boolean!
    commits: [MonetaryCommit!]! @derivedFrom(field: "currencyGovernance")
    votes: [MonetaryVote!]! @derivedFrom(field: "currencyGovernance")
}

type MonetaryProposal @entity {
    """
    id: currencyGovernance + "-" + trustee
    """
    id: String!
    generation: Generation!
    trustee: Trustee!
    enacted: Boolean!
    numberOfRecipients: BigInt!
    randomInflationReward: BigInt!
    lockupDuration: BigInt!
    lockupInterest: BigInt!
    inflationMultiplier: BigInt!
    score: BigInt!
}

type MonetaryCommit @entity {
    """
    id: currencyGovernance + "-" + trustee
    """
    id: String!
    hash: Bytes!
    currencyGovernance: CurrencyGovernance!
    trustee: Trustee!
}

type MonetaryVote @entity {
    """
    id: currencyGovernance + "-" + trustee
    """
    id: String!
    """
    rankedProposals: ordered array of addresses of trustees (or null address) from vote
    """
    rankedProposals: [String!]!
    currencyGovernance: CurrencyGovernance!
    trustee: Trustee!
}

type TrusteeCohort @entity {
    id: String!
    number: BigInt!
    trustees: [Trustee!]! @derivedFrom(field: "cohorts")
}

type Trustee @entity {
    """
    id: address
    """
    id: String!
    cohorts: [TrusteeCohort!]!
    proposals: [MonetaryProposal!]! @derivedFrom(field: "trustee")
}


"""
Community Support entities
"""
type PolicyProposal @entity {
    id: String! "address"
    generation: Generation!
    proposalEnds: BigInt!
    totalVotingPower: BigInt!
    blockNumber: BigInt!
    support: [CommunityProposalSupport!]! @derivedFrom(field: "policyProposal")
}

type CommunityProposal @entity {
    id: String! "address"
    generation: Generation!
    proposer: Bytes!
    name: String!
    description: String!
    url: String!
    reachedSupportThreshold: Boolean!
    refunded: Boolean!
    totalSupportAmount: BigInt!
    support: [CommunityProposalSupport!]! @derivedFrom(field: "proposal")
}

type CommunityProposalSupport @entity {
    id: String! "supporter + - + proposal"
    supporter: Bytes!
    proposal: CommunityProposal!
    policyProposal: PolicyProposal!
    amount: BigInt!
}


"""
Community Vote entities
"""
type PolicyVote @entity {
    """
    id: PolicyVotes address
    """
    id: String! 
    generation: Generation!
    voteEnds: BigInt!
    ENACTION_DELAY: BigInt!
    totalVotingPower: BigInt!
    blockNumber: BigInt!
    proposal: CommunityProposal!
    result: VoteResult
    yesVoteAmount: BigInt!
    totalVoteAmount: BigInt!
    votes: [CommunityProposalVote!]! @derivedFrom(field: "policyVote")
}

enum VoteResult {
    Accepted
    Rejected
    Failed
}

type CommunityProposalVote @entity {
    """
    id: voter address + - + policyVote address
    """
    id: String!
    voter: Bytes!
    policyVote: PolicyVote!
    yesAmount: BigInt!
    totalAmount: BigInt!
}


"""
Account
"""
type Account @entity {
    """
    id: account address
    """
    id: String! 
    ECO: BigInt!
    ECOx: BigInt!
    sECOx: BigInt!
    approvedECO: [ECOAllowance!]! @derivedFrom(field: "owner")
    historicalECOBalances: [ECOBalance!]! @derivedFrom(field: "account")
    historicalsECOxBalances: [sECOxBalance!]! @derivedFrom(field: "account")
    fundsLockupDeposits: [FundsLockupDeposit!]! @derivedFrom(field: "account")
    fundsLockupDepositsDelegatedToMe: [FundsLockupDeposit!]! @derivedFrom(field: "delegate")
}


"""
ECO Allowance
"""
type ECOAllowance @entity {
    """
    id: owner + "-" + spender
    """
    id: String! 
    owner: Account!
    spender: String!
    value: BigInt! 
}


"""
Token
"""
type Token @entity {
    id: String!
    name: String!
    symbol: String!
    decimals: Int!
    totalSupply: BigInt!
}


"""
ECO balance
historical ECO balance at blockNumber
"""
type ECOBalance @entity {
    id: String!
    account: Account!
    """
    underlying value, to get the value adjusted for inflation/deflation, 
    divide the value by the inflationmultiplier value whose blocknumber is nearest to and less than this balance (or 1e18 if none exists)
    """
    value: BigInt! 
    blockNumber: BigInt!
}


"""
historical linear inflation multipliers
"""
type InflationMultiplier @entity {
    id: Bytes!
    value: BigInt!
    blockNumber: BigInt!
}


"""
sECOx balance
historical sECOx balance at blockNumber (representing a part of voting power)
"""
type sECOxBalance @entity {
    id: Bytes!
    account: Account!
    value: BigInt! 
    blockNumber: BigInt!
}


"""
Funds Lockup
"""
type FundsLockup @entity {
    """
    id: lockup address
    """
    id: String!
    generation: String!
    deposits: [FundsLockupDeposit!]! @derivedFrom(field: "lockup")
}


"""
Deposits to a funds lockup (active)
"""
type FundsLockupDeposit @entity {
    """
    id: lockup address + "-" + 
    """
    id: String!
    account: Account!
    lockup: FundsLockup!
    """
    amount/reward: underlying value of eco
    """
    amount: BigInt!
    reward: BigInt!
    lockupEndsAt: BigInt!
    delegate: Account!
}