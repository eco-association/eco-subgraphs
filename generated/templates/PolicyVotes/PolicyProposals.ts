// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ProposalAdded extends ethereum.Event {
  get params(): ProposalAdded__Params {
    return new ProposalAdded__Params(this);
  }
}

export class ProposalAdded__Params {
  _event: ProposalAdded;

  constructor(event: ProposalAdded) {
    this._event = event;
  }

  get proposer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProposalRefunded extends ethereum.Event {
  get params(): ProposalRefunded__Params {
    return new ProposalRefunded__Params(this);
  }
}

export class ProposalRefunded__Params {
  _event: ProposalRefunded;

  constructor(event: ProposalRefunded) {
    this._event = event;
  }

  get proposer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProposalSupported extends ethereum.Event {
  get params(): ProposalSupported__Params {
    return new ProposalSupported__Params(this);
  }
}

export class ProposalSupported__Params {
  _event: ProposalSupported;

  constructor(event: ProposalSupported) {
    this._event = event;
  }

  get supporter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProposalUnsupported extends ethereum.Event {
  get params(): ProposalUnsupported__Params {
    return new ProposalUnsupported__Params(this);
  }
}

export class ProposalUnsupported__Params {
  _event: ProposalUnsupported;

  constructor(event: ProposalUnsupported) {
    this._event = event;
  }

  get unsupporter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SupportThresholdReached extends ethereum.Event {
  get params(): SupportThresholdReached__Params {
    return new SupportThresholdReached__Params(this);
  }
}

export class SupportThresholdReached__Params {
  _event: SupportThresholdReached;

  constructor(event: SupportThresholdReached) {
    this._event = event;
  }

  get proposalAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VotingStarted extends ethereum.Event {
  get params(): VotingStarted__Params {
    return new VotingStarted__Params(this);
  }
}

export class VotingStarted__Params {
  _event: VotingStarted;

  constructor(event: VotingStarted) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PolicyProposals__proposalsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;

  constructor(value0: Address, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class PolicyProposals__allProposalDataResultValue0Struct extends ethereum.Tuple {
  get proposer(): Address {
    return this[0].toAddress();
  }

  get proposal(): Address {
    return this[1].toAddress();
  }

  get totalstake(): BigInt {
    return this[2].toBigInt();
  }
}

export class PolicyProposals extends ethereum.SmartContract {
  static bind(address: Address): PolicyProposals {
    return new PolicyProposals("PolicyProposals", address);
  }

  COST_REGISTER(): BigInt {
    let result = super.call("COST_REGISTER", "COST_REGISTER():(uint256)", []);

    return result[0].toBigInt();
  }

  try_COST_REGISTER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "COST_REGISTER",
      "COST_REGISTER():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ID_CLEANUP(): Bytes {
    let result = super.call("ID_CLEANUP", "ID_CLEANUP():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_CLEANUP(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ID_CLEANUP", "ID_CLEANUP():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_CURRENCY_GOVERNANCE(): Bytes {
    let result = super.call(
      "ID_CURRENCY_GOVERNANCE",
      "ID_CURRENCY_GOVERNANCE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_CURRENCY_GOVERNANCE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_CURRENCY_GOVERNANCE",
      "ID_CURRENCY_GOVERNANCE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_CURRENCY_TIMER(): Bytes {
    let result = super.call(
      "ID_CURRENCY_TIMER",
      "ID_CURRENCY_TIMER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_CURRENCY_TIMER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_CURRENCY_TIMER",
      "ID_CURRENCY_TIMER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_ECO(): Bytes {
    let result = super.call("ID_ECO", "ID_ECO():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_ECO(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ID_ECO", "ID_ECO():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_ECOX(): Bytes {
    let result = super.call("ID_ECOX", "ID_ECOX():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_ECOX(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ID_ECOX", "ID_ECOX():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_ECOXLOCKUP(): Bytes {
    let result = super.call("ID_ECOXLOCKUP", "ID_ECOXLOCKUP():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_ECOXLOCKUP(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_ECOXLOCKUP",
      "ID_ECOXLOCKUP():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_ECO_LABS(): Bytes {
    let result = super.call("ID_ECO_LABS", "ID_ECO_LABS():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_ECO_LABS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ID_ECO_LABS", "ID_ECO_LABS():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_FAUCET(): Bytes {
    let result = super.call("ID_FAUCET", "ID_FAUCET():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_FAUCET(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ID_FAUCET", "ID_FAUCET():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_POLICY_PROPOSALS(): Bytes {
    let result = super.call(
      "ID_POLICY_PROPOSALS",
      "ID_POLICY_PROPOSALS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_POLICY_PROPOSALS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_POLICY_PROPOSALS",
      "ID_POLICY_PROPOSALS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_POLICY_VOTES(): Bytes {
    let result = super.call(
      "ID_POLICY_VOTES",
      "ID_POLICY_VOTES():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_POLICY_VOTES(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_POLICY_VOTES",
      "ID_POLICY_VOTES():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_TIMED_POLICIES(): Bytes {
    let result = super.call(
      "ID_TIMED_POLICIES",
      "ID_TIMED_POLICIES():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_TIMED_POLICIES(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_TIMED_POLICIES",
      "ID_TIMED_POLICIES():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_TRUSTED_NODES(): Bytes {
    let result = super.call(
      "ID_TRUSTED_NODES",
      "ID_TRUSTED_NODES():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_TRUSTED_NODES(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_TRUSTED_NODES",
      "ID_TRUSTED_NODES():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PROPOSAL_TIME(): BigInt {
    let result = super.call("PROPOSAL_TIME", "PROPOSAL_TIME():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PROPOSAL_TIME(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PROPOSAL_TIME",
      "PROPOSAL_TIME():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REFUND_IF_LOST(): BigInt {
    let result = super.call("REFUND_IF_LOST", "REFUND_IF_LOST():(uint256)", []);

    return result[0].toBigInt();
  }

  try_REFUND_IF_LOST(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REFUND_IF_LOST",
      "REFUND_IF_LOST():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allProposals(param0: BigInt): Address {
    let result = super.call("allProposals", "allProposals(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allProposals(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allProposals",
      "allProposals(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  blockNumber(): BigInt {
    let result = super.call("blockNumber", "blockNumber():(uint256)", []);

    return result[0].toBigInt();
  }

  try_blockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("blockNumber", "blockNumber():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canImplementInterfaceForAddress(param0: Bytes, _addr: Address): Bytes {
    let result = super.call(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [ethereum.Value.fromFixedBytes(param0), ethereum.Value.fromAddress(_addr)]
    );

    return result[0].toBytes();
  }

  try_canImplementInterfaceForAddress(
    param0: Bytes,
    _addr: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [ethereum.Value.fromFixedBytes(param0), ethereum.Value.fromAddress(_addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  clone(): Address {
    let result = super.call("clone", "clone():(address)", []);

    return result[0].toAddress();
  }

  try_clone(): ethereum.CallResult<Address> {
    let result = super.tryCall("clone", "clone():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  policy(): Address {
    let result = super.call("policy", "policy():(address)", []);

    return result[0].toAddress();
  }

  try_policy(): ethereum.CallResult<Address> {
    let result = super.tryCall("policy", "policy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  policyVotesImpl(): Address {
    let result = super.call(
      "policyVotesImpl",
      "policyVotesImpl():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_policyVotesImpl(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "policyVotesImpl",
      "policyVotesImpl():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposalEnds(): BigInt {
    let result = super.call("proposalEnds", "proposalEnds():(uint256)", []);

    return result[0].toBigInt();
  }

  try_proposalEnds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("proposalEnds", "proposalEnds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalSelected(): boolean {
    let result = super.call(
      "proposalSelected",
      "proposalSelected():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_proposalSelected(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "proposalSelected",
      "proposalSelected():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proposalToConfigure(): Address {
    let result = super.call(
      "proposalToConfigure",
      "proposalToConfigure():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_proposalToConfigure(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "proposalToConfigure",
      "proposalToConfigure():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposals(param0: Address): PolicyProposals__proposalsResult {
    let result = super.call(
      "proposals",
      "proposals(address):(address,address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new PolicyProposals__proposalsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_proposals(
    param0: Address
  ): ethereum.CallResult<PolicyProposals__proposalsResult> {
    let result = super.tryCall(
      "proposals",
      "proposals(address):(address,address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PolicyProposals__proposalsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  simplePolicyImpl(): Address {
    let result = super.call(
      "simplePolicyImpl",
      "simplePolicyImpl():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_simplePolicyImpl(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "simplePolicyImpl",
      "simplePolicyImpl():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  staked(param0: Address, param1: Address): boolean {
    let result = super.call("staked", "staked(address,address):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBoolean();
  }

  try_staked(param0: Address, param1: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("staked", "staked(address,address):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalVotingPower(_blockNumber: BigInt): BigInt {
    let result = super.call(
      "totalVotingPower",
      "totalVotingPower(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_blockNumber)]
    );

    return result[0].toBigInt();
  }

  try_totalVotingPower(_blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalVotingPower",
      "totalVotingPower(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalproposals(): BigInt {
    let result = super.call("totalproposals", "totalproposals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalproposals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalproposals",
      "totalproposals():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingPower(_who: Address, _blockNumber: BigInt): BigInt {
    let result = super.call(
      "votingPower",
      "votingPower(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_who),
        ethereum.Value.fromUnsignedBigInt(_blockNumber)
      ]
    );

    return result[0].toBigInt();
  }

  try_votingPower(
    _who: Address,
    _blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingPower",
      "votingPower(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_who),
        ethereum.Value.fromUnsignedBigInt(_blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allProposalAddresses(): Array<Address> {
    let result = super.call(
      "allProposalAddresses",
      "allProposalAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_allProposalAddresses(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "allProposalAddresses",
      "allProposalAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  allProposalData(): Array<PolicyProposals__allProposalDataResultValue0Struct> {
    let result = super.call(
      "allProposalData",
      "allProposalData():((address,address,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      PolicyProposals__allProposalDataResultValue0Struct
    >();
  }

  try_allProposalData(): ethereum.CallResult<
    Array<PolicyProposals__allProposalDataResultValue0Struct>
  > {
    let result = super.tryCall(
      "allProposalData",
      "allProposalData():((address,address,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        PolicyProposals__allProposalDataResultValue0Struct
      >()
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _policy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _policyvotes(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _simplepolicy(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloneCall extends ethereum.Call {
  get inputs(): CloneCall__Inputs {
    return new CloneCall__Inputs(this);
  }

  get outputs(): CloneCall__Outputs {
    return new CloneCall__Outputs(this);
  }
}

export class CloneCall__Inputs {
  _call: CloneCall;

  constructor(call: CloneCall) {
    this._call = call;
  }
}

export class CloneCall__Outputs {
  _call: CloneCall;

  constructor(call: CloneCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class PolicyCommandCall extends ethereum.Call {
  get inputs(): PolicyCommandCall__Inputs {
    return new PolicyCommandCall__Inputs(this);
  }

  get outputs(): PolicyCommandCall__Outputs {
    return new PolicyCommandCall__Outputs(this);
  }
}

export class PolicyCommandCall__Inputs {
  _call: PolicyCommandCall;

  constructor(call: PolicyCommandCall) {
    this._call = call;
  }

  get _delegate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PolicyCommandCall__Outputs {
  _call: PolicyCommandCall;

  constructor(call: PolicyCommandCall) {
    this._call = call;
  }
}

export class SetExpectedInterfaceSetCall extends ethereum.Call {
  get inputs(): SetExpectedInterfaceSetCall__Inputs {
    return new SetExpectedInterfaceSetCall__Inputs(this);
  }

  get outputs(): SetExpectedInterfaceSetCall__Outputs {
    return new SetExpectedInterfaceSetCall__Outputs(this);
  }
}

export class SetExpectedInterfaceSetCall__Inputs {
  _call: SetExpectedInterfaceSetCall;

  constructor(call: SetExpectedInterfaceSetCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetExpectedInterfaceSetCall__Outputs {
  _call: SetExpectedInterfaceSetCall;

  constructor(call: SetExpectedInterfaceSetCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _self(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RegisterProposalCall extends ethereum.Call {
  get inputs(): RegisterProposalCall__Inputs {
    return new RegisterProposalCall__Inputs(this);
  }

  get outputs(): RegisterProposalCall__Outputs {
    return new RegisterProposalCall__Outputs(this);
  }
}

export class RegisterProposalCall__Inputs {
  _call: RegisterProposalCall;

  constructor(call: RegisterProposalCall) {
    this._call = call;
  }

  get _prop(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterProposalCall__Outputs {
  _call: RegisterProposalCall;

  constructor(call: RegisterProposalCall) {
    this._call = call;
  }
}

export class SupportCall extends ethereum.Call {
  get inputs(): SupportCall__Inputs {
    return new SupportCall__Inputs(this);
  }

  get outputs(): SupportCall__Outputs {
    return new SupportCall__Outputs(this);
  }
}

export class SupportCall__Inputs {
  _call: SupportCall;

  constructor(call: SupportCall) {
    this._call = call;
  }

  get _prop(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SupportCall__Outputs {
  _call: SupportCall;

  constructor(call: SupportCall) {
    this._call = call;
  }
}

export class UnsupportCall extends ethereum.Call {
  get inputs(): UnsupportCall__Inputs {
    return new UnsupportCall__Inputs(this);
  }

  get outputs(): UnsupportCall__Outputs {
    return new UnsupportCall__Outputs(this);
  }
}

export class UnsupportCall__Inputs {
  _call: UnsupportCall;

  constructor(call: UnsupportCall) {
    this._call = call;
  }

  get _prop(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnsupportCall__Outputs {
  _call: UnsupportCall;

  constructor(call: UnsupportCall) {
    this._call = call;
  }
}

export class DeployProposalVotingCall extends ethereum.Call {
  get inputs(): DeployProposalVotingCall__Inputs {
    return new DeployProposalVotingCall__Inputs(this);
  }

  get outputs(): DeployProposalVotingCall__Outputs {
    return new DeployProposalVotingCall__Outputs(this);
  }
}

export class DeployProposalVotingCall__Inputs {
  _call: DeployProposalVotingCall;

  constructor(call: DeployProposalVotingCall) {
    this._call = call;
  }
}

export class DeployProposalVotingCall__Outputs {
  _call: DeployProposalVotingCall;

  constructor(call: DeployProposalVotingCall) {
    this._call = call;
  }
}

export class RefundCall extends ethereum.Call {
  get inputs(): RefundCall__Inputs {
    return new RefundCall__Inputs(this);
  }

  get outputs(): RefundCall__Outputs {
    return new RefundCall__Outputs(this);
  }
}

export class RefundCall__Inputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }

  get _prop(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RefundCall__Outputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class DestructCall extends ethereum.Call {
  get inputs(): DestructCall__Inputs {
    return new DestructCall__Inputs(this);
  }

  get outputs(): DestructCall__Outputs {
    return new DestructCall__Outputs(this);
  }
}

export class DestructCall__Inputs {
  _call: DestructCall;

  constructor(call: DestructCall) {
    this._call = call;
  }
}

export class DestructCall__Outputs {
  _call: DestructCall;

  constructor(call: DestructCall) {
    this._call = call;
  }
}
