// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PolicyVoteCast extends ethereum.Event {
  get params(): PolicyVoteCast__Params {
    return new PolicyVoteCast__Params(this);
  }
}

export class PolicyVoteCast__Params {
  _event: PolicyVoteCast;

  constructor(event: PolicyVoteCast) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vote(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VoteCompleted extends ethereum.Event {
  get params(): VoteCompleted__Params {
    return new VoteCompleted__Params(this);
  }
}

export class VoteCompleted__Params {
  _event: VoteCompleted;

  constructor(event: VoteCompleted) {
    this._event = event;
  }

  get result(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class PolicyVotes extends ethereum.SmartContract {
  static bind(address: Address): PolicyVotes {
    return new PolicyVotes("PolicyVotes", address);
  }

  ENACTION_DELAY(): BigInt {
    let result = super.call("ENACTION_DELAY", "ENACTION_DELAY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ENACTION_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ENACTION_DELAY",
      "ENACTION_DELAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ID_CLEANUP(): Bytes {
    let result = super.call("ID_CLEANUP", "ID_CLEANUP():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_CLEANUP(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ID_CLEANUP", "ID_CLEANUP():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_CURRENCY_GOVERNANCE(): Bytes {
    let result = super.call(
      "ID_CURRENCY_GOVERNANCE",
      "ID_CURRENCY_GOVERNANCE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_CURRENCY_GOVERNANCE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_CURRENCY_GOVERNANCE",
      "ID_CURRENCY_GOVERNANCE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_CURRENCY_TIMER(): Bytes {
    let result = super.call(
      "ID_CURRENCY_TIMER",
      "ID_CURRENCY_TIMER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_CURRENCY_TIMER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_CURRENCY_TIMER",
      "ID_CURRENCY_TIMER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_ECO(): Bytes {
    let result = super.call("ID_ECO", "ID_ECO():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_ECO(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ID_ECO", "ID_ECO():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_ECOX(): Bytes {
    let result = super.call("ID_ECOX", "ID_ECOX():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_ECOX(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ID_ECOX", "ID_ECOX():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_ECOXLOCKUP(): Bytes {
    let result = super.call("ID_ECOXLOCKUP", "ID_ECOXLOCKUP():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_ECOXLOCKUP(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_ECOXLOCKUP",
      "ID_ECOXLOCKUP():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_ECO_LABS(): Bytes {
    let result = super.call("ID_ECO_LABS", "ID_ECO_LABS():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_ECO_LABS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ID_ECO_LABS", "ID_ECO_LABS():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_FAUCET(): Bytes {
    let result = super.call("ID_FAUCET", "ID_FAUCET():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_FAUCET(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ID_FAUCET", "ID_FAUCET():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_POLICY_PROPOSALS(): Bytes {
    let result = super.call(
      "ID_POLICY_PROPOSALS",
      "ID_POLICY_PROPOSALS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_POLICY_PROPOSALS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_POLICY_PROPOSALS",
      "ID_POLICY_PROPOSALS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_POLICY_VOTES(): Bytes {
    let result = super.call(
      "ID_POLICY_VOTES",
      "ID_POLICY_VOTES():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_POLICY_VOTES(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_POLICY_VOTES",
      "ID_POLICY_VOTES():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_TIMED_POLICIES(): Bytes {
    let result = super.call(
      "ID_TIMED_POLICIES",
      "ID_TIMED_POLICIES():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_TIMED_POLICIES(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_TIMED_POLICIES",
      "ID_TIMED_POLICIES():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_TRUSTED_NODES(): Bytes {
    let result = super.call(
      "ID_TRUSTED_NODES",
      "ID_TRUSTED_NODES():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_TRUSTED_NODES(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_TRUSTED_NODES",
      "ID_TRUSTED_NODES():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  VOTE_TIME(): BigInt {
    let result = super.call("VOTE_TIME", "VOTE_TIME():(uint256)", []);

    return result[0].toBigInt();
  }

  try_VOTE_TIME(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("VOTE_TIME", "VOTE_TIME():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blockNumber(): BigInt {
    let result = super.call("blockNumber", "blockNumber():(uint256)", []);

    return result[0].toBigInt();
  }

  try_blockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("blockNumber", "blockNumber():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canImplementInterfaceForAddress(param0: Bytes, _addr: Address): Bytes {
    let result = super.call(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [ethereum.Value.fromFixedBytes(param0), ethereum.Value.fromAddress(_addr)]
    );

    return result[0].toBytes();
  }

  try_canImplementInterfaceForAddress(
    param0: Bytes,
    _addr: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [ethereum.Value.fromFixedBytes(param0), ethereum.Value.fromAddress(_addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  clone(): Address {
    let result = super.call("clone", "clone():(address)", []);

    return result[0].toAddress();
  }

  try_clone(): ethereum.CallResult<Address> {
    let result = super.tryCall("clone", "clone():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  policy(): Address {
    let result = super.call("policy", "policy():(address)", []);

    return result[0].toAddress();
  }

  try_policy(): ethereum.CallResult<Address> {
    let result = super.tryCall("policy", "policy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposal(): Address {
    let result = super.call("proposal", "proposal():(address)", []);

    return result[0].toAddress();
  }

  try_proposal(): ethereum.CallResult<Address> {
    let result = super.tryCall("proposal", "proposal():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stake(param0: Address): BigInt {
    let result = super.call("stake", "stake(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_stake(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stake", "stake(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStake(): BigInt {
    let result = super.call("totalStake", "totalStake():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStake", "totalStake():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalVotingPower(_blockNumber: BigInt): BigInt {
    let result = super.call(
      "totalVotingPower",
      "totalVotingPower(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_blockNumber)]
    );

    return result[0].toBigInt();
  }

  try_totalVotingPower(_blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalVotingPower",
      "totalVotingPower(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  voteEnds(): BigInt {
    let result = super.call("voteEnds", "voteEnds():(uint256)", []);

    return result[0].toBigInt();
  }

  try_voteEnds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("voteEnds", "voteEnds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingPower(_who: Address, _blockNumber: BigInt): BigInt {
    let result = super.call(
      "votingPower",
      "votingPower(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_who),
        ethereum.Value.fromUnsignedBigInt(_blockNumber)
      ]
    );

    return result[0].toBigInt();
  }

  try_votingPower(
    _who: Address,
    _blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingPower",
      "votingPower(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_who),
        ethereum.Value.fromUnsignedBigInt(_blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  yesStake(): BigInt {
    let result = super.call("yesStake", "yesStake():(uint256)", []);

    return result[0].toBigInt();
  }

  try_yesStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("yesStake", "yesStake():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  yesVote(param0: Address): boolean {
    let result = super.call("yesVote", "yesVote(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_yesVote(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("yesVote", "yesVote(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _policy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloneCall extends ethereum.Call {
  get inputs(): CloneCall__Inputs {
    return new CloneCall__Inputs(this);
  }

  get outputs(): CloneCall__Outputs {
    return new CloneCall__Outputs(this);
  }
}

export class CloneCall__Inputs {
  _call: CloneCall;

  constructor(call: CloneCall) {
    this._call = call;
  }
}

export class CloneCall__Outputs {
  _call: CloneCall;

  constructor(call: CloneCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class PolicyCommandCall extends ethereum.Call {
  get inputs(): PolicyCommandCall__Inputs {
    return new PolicyCommandCall__Inputs(this);
  }

  get outputs(): PolicyCommandCall__Outputs {
    return new PolicyCommandCall__Outputs(this);
  }
}

export class PolicyCommandCall__Inputs {
  _call: PolicyCommandCall;

  constructor(call: PolicyCommandCall) {
    this._call = call;
  }

  get _delegate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PolicyCommandCall__Outputs {
  _call: PolicyCommandCall;

  constructor(call: PolicyCommandCall) {
    this._call = call;
  }
}

export class SetExpectedInterfaceSetCall extends ethereum.Call {
  get inputs(): SetExpectedInterfaceSetCall__Inputs {
    return new SetExpectedInterfaceSetCall__Inputs(this);
  }

  get outputs(): SetExpectedInterfaceSetCall__Outputs {
    return new SetExpectedInterfaceSetCall__Outputs(this);
  }
}

export class SetExpectedInterfaceSetCall__Inputs {
  _call: SetExpectedInterfaceSetCall;

  constructor(call: SetExpectedInterfaceSetCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetExpectedInterfaceSetCall__Outputs {
  _call: SetExpectedInterfaceSetCall;

  constructor(call: SetExpectedInterfaceSetCall) {
    this._call = call;
  }
}

export class VoteCall extends ethereum.Call {
  get inputs(): VoteCall__Inputs {
    return new VoteCall__Inputs(this);
  }

  get outputs(): VoteCall__Outputs {
    return new VoteCall__Outputs(this);
  }
}

export class VoteCall__Inputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get _vote(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class VoteCall__Outputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _self(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ConfigureCall extends ethereum.Call {
  get inputs(): ConfigureCall__Inputs {
    return new ConfigureCall__Inputs(this);
  }

  get outputs(): ConfigureCall__Outputs {
    return new ConfigureCall__Outputs(this);
  }
}

export class ConfigureCall__Inputs {
  _call: ConfigureCall;

  constructor(call: ConfigureCall) {
    this._call = call;
  }

  get _proposal(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConfigureCall__Outputs {
  _call: ConfigureCall;

  constructor(call: ConfigureCall) {
    this._call = call;
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }
}
