// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PolicyDecisionStarted extends ethereum.Event {
  get params(): PolicyDecisionStarted__Params {
    return new PolicyDecisionStarted__Params(this);
  }
}

export class PolicyDecisionStarted__Params {
  _event: PolicyDecisionStarted;

  constructor(event: PolicyDecisionStarted) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TimedPolicies extends ethereum.SmartContract {
  static bind(address: Address): TimedPolicies {
    return new TimedPolicies("TimedPolicies", address);
  }

  CURRENCY_TIME(): BigInt {
    let result = super.call("CURRENCY_TIME", "CURRENCY_TIME():(uint256)", []);

    return result[0].toBigInt();
  }

  try_CURRENCY_TIME(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CURRENCY_TIME",
      "CURRENCY_TIME():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  GENERATION_DURATION(): BigInt {
    let result = super.call(
      "GENERATION_DURATION",
      "GENERATION_DURATION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_GENERATION_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "GENERATION_DURATION",
      "GENERATION_DURATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ID_CLEANUP(): Bytes {
    let result = super.call("ID_CLEANUP", "ID_CLEANUP():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_CLEANUP(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ID_CLEANUP", "ID_CLEANUP():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_CURRENCY_GOVERNANCE(): Bytes {
    let result = super.call(
      "ID_CURRENCY_GOVERNANCE",
      "ID_CURRENCY_GOVERNANCE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_CURRENCY_GOVERNANCE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_CURRENCY_GOVERNANCE",
      "ID_CURRENCY_GOVERNANCE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_CURRENCY_TIMER(): Bytes {
    let result = super.call(
      "ID_CURRENCY_TIMER",
      "ID_CURRENCY_TIMER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_CURRENCY_TIMER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_CURRENCY_TIMER",
      "ID_CURRENCY_TIMER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_ECO(): Bytes {
    let result = super.call("ID_ECO", "ID_ECO():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_ECO(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ID_ECO", "ID_ECO():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_ECOX(): Bytes {
    let result = super.call("ID_ECOX", "ID_ECOX():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_ECOX(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ID_ECOX", "ID_ECOX():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_ECOXLOCKUP(): Bytes {
    let result = super.call("ID_ECOXLOCKUP", "ID_ECOXLOCKUP():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_ECOXLOCKUP(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_ECOXLOCKUP",
      "ID_ECOXLOCKUP():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_ECO_LABS(): Bytes {
    let result = super.call("ID_ECO_LABS", "ID_ECO_LABS():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_ECO_LABS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ID_ECO_LABS", "ID_ECO_LABS():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_FAUCET(): Bytes {
    let result = super.call("ID_FAUCET", "ID_FAUCET():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ID_FAUCET(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ID_FAUCET", "ID_FAUCET():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_POLICY_PROPOSALS(): Bytes {
    let result = super.call(
      "ID_POLICY_PROPOSALS",
      "ID_POLICY_PROPOSALS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_POLICY_PROPOSALS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_POLICY_PROPOSALS",
      "ID_POLICY_PROPOSALS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_POLICY_VOTES(): Bytes {
    let result = super.call(
      "ID_POLICY_VOTES",
      "ID_POLICY_VOTES():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_POLICY_VOTES(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_POLICY_VOTES",
      "ID_POLICY_VOTES():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_TIMED_POLICIES(): Bytes {
    let result = super.call(
      "ID_TIMED_POLICIES",
      "ID_TIMED_POLICIES():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_TIMED_POLICIES(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_TIMED_POLICIES",
      "ID_TIMED_POLICIES():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ID_TRUSTED_NODES(): Bytes {
    let result = super.call(
      "ID_TRUSTED_NODES",
      "ID_TRUSTED_NODES():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ID_TRUSTED_NODES(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ID_TRUSTED_NODES",
      "ID_TRUSTED_NODES():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  canImplementInterfaceForAddress(param0: Bytes, _addr: Address): Bytes {
    let result = super.call(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [ethereum.Value.fromFixedBytes(param0), ethereum.Value.fromAddress(_addr)]
    );

    return result[0].toBytes();
  }

  try_canImplementInterfaceForAddress(
    param0: Bytes,
    _addr: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [ethereum.Value.fromFixedBytes(param0), ethereum.Value.fromAddress(_addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  clone(): Address {
    let result = super.call("clone", "clone():(address)", []);

    return result[0].toAddress();
  }

  try_clone(): ethereum.CallResult<Address> {
    let result = super.tryCall("clone", "clone():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  internalGeneration(): BigInt {
    let result = super.call(
      "internalGeneration",
      "internalGeneration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_internalGeneration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "internalGeneration",
      "internalGeneration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextGenerationStart(): BigInt {
    let result = super.call(
      "nextGenerationStart",
      "nextGenerationStart():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextGenerationStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextGenerationStart",
      "nextGenerationStart():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  notificationHashes(param0: BigInt): Bytes {
    let result = super.call(
      "notificationHashes",
      "notificationHashes(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBytes();
  }

  try_notificationHashes(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "notificationHashes",
      "notificationHashes(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  policy(): Address {
    let result = super.call("policy", "policy():(address)", []);

    return result[0].toAddress();
  }

  try_policy(): ethereum.CallResult<Address> {
    let result = super.tryCall("policy", "policy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  policyProposalImpl(): Address {
    let result = super.call(
      "policyProposalImpl",
      "policyProposalImpl():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_policyProposalImpl(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "policyProposalImpl",
      "policyProposalImpl():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  simplePolicyImpl(): Address {
    let result = super.call(
      "simplePolicyImpl",
      "simplePolicyImpl():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_simplePolicyImpl(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "simplePolicyImpl",
      "simplePolicyImpl():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNotificationHashesLength(): BigInt {
    let result = super.call(
      "getNotificationHashesLength",
      "getNotificationHashesLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNotificationHashesLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNotificationHashesLength",
      "getNotificationHashesLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  generation(): BigInt {
    let result = super.call("generation", "generation():(uint256)", []);

    return result[0].toBigInt();
  }

  try_generation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("generation", "generation():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _policy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _policyproposal(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _simplepolicy(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _notificationHashes(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloneCall extends ethereum.Call {
  get inputs(): CloneCall__Inputs {
    return new CloneCall__Inputs(this);
  }

  get outputs(): CloneCall__Outputs {
    return new CloneCall__Outputs(this);
  }
}

export class CloneCall__Inputs {
  _call: CloneCall;

  constructor(call: CloneCall) {
    this._call = call;
  }
}

export class CloneCall__Outputs {
  _call: CloneCall;

  constructor(call: CloneCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class PolicyCommandCall extends ethereum.Call {
  get inputs(): PolicyCommandCall__Inputs {
    return new PolicyCommandCall__Inputs(this);
  }

  get outputs(): PolicyCommandCall__Outputs {
    return new PolicyCommandCall__Outputs(this);
  }
}

export class PolicyCommandCall__Inputs {
  _call: PolicyCommandCall;

  constructor(call: PolicyCommandCall) {
    this._call = call;
  }

  get _delegate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PolicyCommandCall__Outputs {
  _call: PolicyCommandCall;

  constructor(call: PolicyCommandCall) {
    this._call = call;
  }
}

export class SetExpectedInterfaceSetCall extends ethereum.Call {
  get inputs(): SetExpectedInterfaceSetCall__Inputs {
    return new SetExpectedInterfaceSetCall__Inputs(this);
  }

  get outputs(): SetExpectedInterfaceSetCall__Outputs {
    return new SetExpectedInterfaceSetCall__Outputs(this);
  }
}

export class SetExpectedInterfaceSetCall__Inputs {
  _call: SetExpectedInterfaceSetCall;

  constructor(call: SetExpectedInterfaceSetCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetExpectedInterfaceSetCall__Outputs {
  _call: SetExpectedInterfaceSetCall;

  constructor(call: SetExpectedInterfaceSetCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _self(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class IncrementGenerationCall extends ethereum.Call {
  get inputs(): IncrementGenerationCall__Inputs {
    return new IncrementGenerationCall__Inputs(this);
  }

  get outputs(): IncrementGenerationCall__Outputs {
    return new IncrementGenerationCall__Outputs(this);
  }
}

export class IncrementGenerationCall__Inputs {
  _call: IncrementGenerationCall;

  constructor(call: IncrementGenerationCall) {
    this._call = call;
  }
}

export class IncrementGenerationCall__Outputs {
  _call: IncrementGenerationCall;

  constructor(call: IncrementGenerationCall) {
    this._call = call;
  }
}
