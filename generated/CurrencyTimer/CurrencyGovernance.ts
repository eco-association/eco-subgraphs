// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ProposalCreated extends ethereum.Event {
  get params(): ProposalCreated__Params {
    return new ProposalCreated__Params(this);
  }
}

export class ProposalCreated__Params {
  _event: ProposalCreated;

  constructor(event: ProposalCreated) {
    this._event = event;
  }

  get trusteeAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _numberOfRecipients(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _randomInflationReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _lockupDuration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _lockupInterest(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _inflationMultiplier(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ProposalDeleted extends ethereum.Event {
  get params(): ProposalDeleted__Params {
    return new ProposalDeleted__Params(this);
  }
}

export class ProposalDeleted__Params {
  _event: ProposalDeleted;

  constructor(event: ProposalDeleted) {
    this._event = event;
  }

  get trusteeAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RevealStarted extends ethereum.Event {
  get params(): RevealStarted__Params {
    return new RevealStarted__Params(this);
  }
}

export class RevealStarted__Params {
  _event: RevealStarted;

  constructor(event: RevealStarted) {
    this._event = event;
  }
}

export class VoteCast extends ethereum.Event {
  get params(): VoteCast__Params {
    return new VoteCast__Params(this);
  }
}

export class VoteCast__Params {
  _event: VoteCast;

  constructor(event: VoteCast) {
    this._event = event;
  }

  get trustee(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VoteResults extends ethereum.Event {
  get params(): VoteResults__Params {
    return new VoteResults__Params(this);
  }
}

export class VoteResults__Params {
  _event: VoteResults;

  constructor(event: VoteResults) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VoteRevealed extends ethereum.Event {
  get params(): VoteRevealed__Params {
    return new VoteRevealed__Params(this);
  }
}

export class VoteRevealed__Params {
  _event: VoteRevealed;

  constructor(event: VoteRevealed) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get votes(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }
}

export class VoteStart extends ethereum.Event {
  get params(): VoteStart__Params {
    return new VoteStart__Params(this);
  }
}

export class VoteStart__Params {
  _event: VoteStart;

  constructor(event: VoteStart) {
    this._event = event;
  }
}

export class CurrencyGovernance__proposalsResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class CurrencyGovernance extends ethereum.SmartContract {
  static bind(address: Address): CurrencyGovernance {
    return new CurrencyGovernance("CurrencyGovernance", address);
  }

  PROPOSAL_TIME(): BigInt {
    let result = super.call("PROPOSAL_TIME", "PROPOSAL_TIME():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PROPOSAL_TIME(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PROPOSAL_TIME",
      "PROPOSAL_TIME():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REVEAL_TIME(): BigInt {
    let result = super.call("REVEAL_TIME", "REVEAL_TIME():(uint256)", []);

    return result[0].toBigInt();
  }

  try_REVEAL_TIME(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("REVEAL_TIME", "REVEAL_TIME():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VOTING_TIME(): BigInt {
    let result = super.call("VOTING_TIME", "VOTING_TIME():(uint256)", []);

    return result[0].toBigInt();
  }

  try_VOTING_TIME(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("VOTING_TIME", "VOTING_TIME():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canImplementInterfaceForAddress(param0: Bytes, _addr: Address): Bytes {
    let result = super.call(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [ethereum.Value.fromFixedBytes(param0), ethereum.Value.fromAddress(_addr)]
    );

    return result[0].toBytes();
  }

  try_canImplementInterfaceForAddress(
    param0: Bytes,
    _addr: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [ethereum.Value.fromFixedBytes(param0), ethereum.Value.fromAddress(_addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  clone(): Address {
    let result = super.call("clone", "clone():(address)", []);

    return result[0].toAddress();
  }

  try_clone(): ethereum.CallResult<Address> {
    let result = super.tryCall("clone", "clone():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  commitments(param0: Address): Bytes {
    let result = super.call("commitments", "commitments(address):(bytes32)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBytes();
  }

  try_commitments(param0: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "commitments",
      "commitments(address):(bytes32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  leader(): Address {
    let result = super.call("leader", "leader():(address)", []);

    return result[0].toAddress();
  }

  try_leader(): ethereum.CallResult<Address> {
    let result = super.tryCall("leader", "leader():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  policy(): Address {
    let result = super.call("policy", "policy():(address)", []);

    return result[0].toAddress();
  }

  try_policy(): ethereum.CallResult<Address> {
    let result = super.tryCall("policy", "policy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposalEnds(): BigInt {
    let result = super.call("proposalEnds", "proposalEnds():(uint256)", []);

    return result[0].toBigInt();
  }

  try_proposalEnds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("proposalEnds", "proposalEnds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposals(param0: Address): CurrencyGovernance__proposalsResult {
    let result = super.call(
      "proposals",
      "proposals(address):(bool,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new CurrencyGovernance__proposalsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_proposals(
    param0: Address
  ): ethereum.CallResult<CurrencyGovernance__proposalsResult> {
    let result = super.tryCall(
      "proposals",
      "proposals(address):(bool,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CurrencyGovernance__proposalsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  revealEnds(): BigInt {
    let result = super.call("revealEnds", "revealEnds():(uint256)", []);

    return result[0].toBigInt();
  }

  try_revealEnds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("revealEnds", "revealEnds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  score(param0: Address): BigInt {
    let result = super.call("score", "score(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_score(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("score", "score(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stage(): i32 {
    let result = super.call("stage", "stage():(uint8)", []);

    return result[0].toI32();
  }

  try_stage(): ethereum.CallResult<i32> {
    let result = super.tryCall("stage", "stage():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  votingEnds(): BigInt {
    let result = super.call("votingEnds", "votingEnds():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votingEnds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votingEnds", "votingEnds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  winner(): Address {
    let result = super.call("winner", "winner():(address)", []);

    return result[0].toAddress();
  }

  try_winner(): ethereum.CallResult<Address> {
    let result = super.tryCall("winner", "winner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _policy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloneCall extends ethereum.Call {
  get inputs(): CloneCall__Inputs {
    return new CloneCall__Inputs(this);
  }

  get outputs(): CloneCall__Outputs {
    return new CloneCall__Outputs(this);
  }
}

export class CloneCall__Inputs {
  _call: CloneCall;

  constructor(call: CloneCall) {
    this._call = call;
  }
}

export class CloneCall__Outputs {
  _call: CloneCall;

  constructor(call: CloneCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class PolicyCommandCall extends ethereum.Call {
  get inputs(): PolicyCommandCall__Inputs {
    return new PolicyCommandCall__Inputs(this);
  }

  get outputs(): PolicyCommandCall__Outputs {
    return new PolicyCommandCall__Outputs(this);
  }
}

export class PolicyCommandCall__Inputs {
  _call: PolicyCommandCall;

  constructor(call: PolicyCommandCall) {
    this._call = call;
  }

  get _delegate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PolicyCommandCall__Outputs {
  _call: PolicyCommandCall;

  constructor(call: PolicyCommandCall) {
    this._call = call;
  }
}

export class SetExpectedInterfaceSetCall extends ethereum.Call {
  get inputs(): SetExpectedInterfaceSetCall__Inputs {
    return new SetExpectedInterfaceSetCall__Inputs(this);
  }

  get outputs(): SetExpectedInterfaceSetCall__Outputs {
    return new SetExpectedInterfaceSetCall__Outputs(this);
  }
}

export class SetExpectedInterfaceSetCall__Inputs {
  _call: SetExpectedInterfaceSetCall;

  constructor(call: SetExpectedInterfaceSetCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetExpectedInterfaceSetCall__Outputs {
  _call: SetExpectedInterfaceSetCall;

  constructor(call: SetExpectedInterfaceSetCall) {
    this._call = call;
  }
}

export class UpdateStageCall extends ethereum.Call {
  get inputs(): UpdateStageCall__Inputs {
    return new UpdateStageCall__Inputs(this);
  }

  get outputs(): UpdateStageCall__Outputs {
    return new UpdateStageCall__Outputs(this);
  }
}

export class UpdateStageCall__Inputs {
  _call: UpdateStageCall;

  constructor(call: UpdateStageCall) {
    this._call = call;
  }
}

export class UpdateStageCall__Outputs {
  _call: UpdateStageCall;

  constructor(call: UpdateStageCall) {
    this._call = call;
  }
}

export class ProposeCall extends ethereum.Call {
  get inputs(): ProposeCall__Inputs {
    return new ProposeCall__Inputs(this);
  }

  get outputs(): ProposeCall__Outputs {
    return new ProposeCall__Outputs(this);
  }
}

export class ProposeCall__Inputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }

  get _numberOfRecipients(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _randomInflationReward(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _lockupDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _lockupInterest(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _inflationMultiplier(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ProposeCall__Outputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }
}

export class UnproposeCall extends ethereum.Call {
  get inputs(): UnproposeCall__Inputs {
    return new UnproposeCall__Inputs(this);
  }

  get outputs(): UnproposeCall__Outputs {
    return new UnproposeCall__Outputs(this);
  }
}

export class UnproposeCall__Inputs {
  _call: UnproposeCall;

  constructor(call: UnproposeCall) {
    this._call = call;
  }
}

export class UnproposeCall__Outputs {
  _call: UnproposeCall;

  constructor(call: UnproposeCall) {
    this._call = call;
  }
}

export class CommitCall extends ethereum.Call {
  get inputs(): CommitCall__Inputs {
    return new CommitCall__Inputs(this);
  }

  get outputs(): CommitCall__Outputs {
    return new CommitCall__Outputs(this);
  }
}

export class CommitCall__Inputs {
  _call: CommitCall;

  constructor(call: CommitCall) {
    this._call = call;
  }

  get _commitment(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CommitCall__Outputs {
  _call: CommitCall;

  constructor(call: CommitCall) {
    this._call = call;
  }
}

export class RevealCall extends ethereum.Call {
  get inputs(): RevealCall__Inputs {
    return new RevealCall__Inputs(this);
  }

  get outputs(): RevealCall__Outputs {
    return new RevealCall__Outputs(this);
  }
}

export class RevealCall__Inputs {
  _call: RevealCall;

  constructor(call: RevealCall) {
    this._call = call;
  }

  get _seed(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _votes(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class RevealCall__Outputs {
  _call: RevealCall;

  constructor(call: RevealCall) {
    this._call = call;
  }
}

export class ComputeCall extends ethereum.Call {
  get inputs(): ComputeCall__Inputs {
    return new ComputeCall__Inputs(this);
  }

  get outputs(): ComputeCall__Outputs {
    return new ComputeCall__Outputs(this);
  }
}

export class ComputeCall__Inputs {
  _call: ComputeCall;

  constructor(call: ComputeCall) {
    this._call = call;
  }
}

export class ComputeCall__Outputs {
  _call: ComputeCall;

  constructor(call: ComputeCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _self(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}
