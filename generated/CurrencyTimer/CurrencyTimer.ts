// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewCurrencyGovernance extends ethereum.Event {
  get params(): NewCurrencyGovernance__Params {
    return new NewCurrencyGovernance__Params(this);
  }
}

export class NewCurrencyGovernance__Params {
  _event: NewCurrencyGovernance;

  constructor(event: NewCurrencyGovernance) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewInflation extends ethereum.Event {
  get params(): NewInflation__Params {
    return new NewInflation__Params(this);
  }
}

export class NewInflation__Params {
  _event: NewInflation;

  constructor(event: NewInflation) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewInflationRootHashProposal extends ethereum.Event {
  get params(): NewInflationRootHashProposal__Params {
    return new NewInflationRootHashProposal__Params(this);
  }
}

export class NewInflationRootHashProposal__Params {
  _event: NewInflationRootHashProposal;

  constructor(event: NewInflationRootHashProposal) {
    this._event = event;
  }

  get inflationRootHashProposalContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get generation(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewLockup extends ethereum.Event {
  get params(): NewLockup__Params {
    return new NewLockup__Params(this);
  }
}

export class NewLockup__Params {
  _event: NewLockup;

  constructor(event: NewLockup) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CurrencyTimer extends ethereum.SmartContract {
  static bind(address: Address): CurrencyTimer {
    return new CurrencyTimer("CurrencyTimer", address);
  }

  bordaImpl(): Address {
    let result = super.call("bordaImpl", "bordaImpl():(address)", []);

    return result[0].toAddress();
  }

  try_bordaImpl(): ethereum.CallResult<Address> {
    let result = super.tryCall("bordaImpl", "bordaImpl():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  canImplementInterfaceForAddress(param0: Bytes, _addr: Address): Bytes {
    let result = super.call(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [ethereum.Value.fromFixedBytes(param0), ethereum.Value.fromAddress(_addr)]
    );

    return result[0].toBytes();
  }

  try_canImplementInterfaceForAddress(
    param0: Bytes,
    _addr: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [ethereum.Value.fromFixedBytes(param0), ethereum.Value.fromAddress(_addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  clone(): Address {
    let result = super.call("clone", "clone():(address)", []);

    return result[0].toAddress();
  }

  try_clone(): ethereum.CallResult<Address> {
    let result = super.tryCall("clone", "clone():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentGeneration(): BigInt {
    let result = super.call(
      "currentGeneration",
      "currentGeneration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentGeneration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentGeneration",
      "currentGeneration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ecoToken(): Address {
    let result = super.call("ecoToken", "ecoToken():(address)", []);

    return result[0].toAddress();
  }

  try_ecoToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("ecoToken", "ecoToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  inflationImpl(): Address {
    let result = super.call("inflationImpl", "inflationImpl():(address)", []);

    return result[0].toAddress();
  }

  try_inflationImpl(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "inflationImpl",
      "inflationImpl():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  inflationRootHashProposalImpl(): Address {
    let result = super.call(
      "inflationRootHashProposalImpl",
      "inflationRootHashProposalImpl():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_inflationRootHashProposalImpl(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "inflationRootHashProposalImpl",
      "inflationRootHashProposalImpl():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isLockup(param0: Address): boolean {
    let result = super.call("isLockup", "isLockup(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isLockup(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLockup", "isLockup(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockupImpl(): Address {
    let result = super.call("lockupImpl", "lockupImpl():(address)", []);

    return result[0].toAddress();
  }

  try_lockupImpl(): ethereum.CallResult<Address> {
    let result = super.tryCall("lockupImpl", "lockupImpl():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lockups(param0: BigInt): Address {
    let result = super.call("lockups", "lockups(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_lockups(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("lockups", "lockups(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  policy(): Address {
    let result = super.call("policy", "policy():(address)", []);

    return result[0].toAddress();
  }

  try_policy(): ethereum.CallResult<Address> {
    let result = super.tryCall("policy", "policy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rootHashAddressPerGeneration(param0: BigInt): Address {
    let result = super.call(
      "rootHashAddressPerGeneration",
      "rootHashAddressPerGeneration(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_rootHashAddressPerGeneration(
    param0: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rootHashAddressPerGeneration",
      "rootHashAddressPerGeneration(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _policy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borda(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _inflation(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _lockup(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _inflationRootHashProposal(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _ecoAddr(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloneCall extends ethereum.Call {
  get inputs(): CloneCall__Inputs {
    return new CloneCall__Inputs(this);
  }

  get outputs(): CloneCall__Outputs {
    return new CloneCall__Outputs(this);
  }
}

export class CloneCall__Inputs {
  _call: CloneCall;

  constructor(call: CloneCall) {
    this._call = call;
  }
}

export class CloneCall__Outputs {
  _call: CloneCall;

  constructor(call: CloneCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _self(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LockupWithdrawalCall extends ethereum.Call {
  get inputs(): LockupWithdrawalCall__Inputs {
    return new LockupWithdrawalCall__Inputs(this);
  }

  get outputs(): LockupWithdrawalCall__Outputs {
    return new LockupWithdrawalCall__Outputs(this);
  }
}

export class LockupWithdrawalCall__Inputs {
  _call: LockupWithdrawalCall;

  constructor(call: LockupWithdrawalCall) {
    this._call = call;
  }

  get _withdrawer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _penalty(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class LockupWithdrawalCall__Outputs {
  _call: LockupWithdrawalCall;

  constructor(call: LockupWithdrawalCall) {
    this._call = call;
  }
}

export class NotifyGenerationIncreaseCall extends ethereum.Call {
  get inputs(): NotifyGenerationIncreaseCall__Inputs {
    return new NotifyGenerationIncreaseCall__Inputs(this);
  }

  get outputs(): NotifyGenerationIncreaseCall__Outputs {
    return new NotifyGenerationIncreaseCall__Outputs(this);
  }
}

export class NotifyGenerationIncreaseCall__Inputs {
  _call: NotifyGenerationIncreaseCall;

  constructor(call: NotifyGenerationIncreaseCall) {
    this._call = call;
  }
}

export class NotifyGenerationIncreaseCall__Outputs {
  _call: NotifyGenerationIncreaseCall;

  constructor(call: NotifyGenerationIncreaseCall) {
    this._call = call;
  }
}

export class PolicyCommandCall extends ethereum.Call {
  get inputs(): PolicyCommandCall__Inputs {
    return new PolicyCommandCall__Inputs(this);
  }

  get outputs(): PolicyCommandCall__Outputs {
    return new PolicyCommandCall__Outputs(this);
  }
}

export class PolicyCommandCall__Inputs {
  _call: PolicyCommandCall;

  constructor(call: PolicyCommandCall) {
    this._call = call;
  }

  get _delegate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PolicyCommandCall__Outputs {
  _call: PolicyCommandCall;

  constructor(call: PolicyCommandCall) {
    this._call = call;
  }
}

export class SetExpectedInterfaceSetCall extends ethereum.Call {
  get inputs(): SetExpectedInterfaceSetCall__Inputs {
    return new SetExpectedInterfaceSetCall__Inputs(this);
  }

  get outputs(): SetExpectedInterfaceSetCall__Outputs {
    return new SetExpectedInterfaceSetCall__Outputs(this);
  }
}

export class SetExpectedInterfaceSetCall__Inputs {
  _call: SetExpectedInterfaceSetCall;

  constructor(call: SetExpectedInterfaceSetCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetExpectedInterfaceSetCall__Outputs {
  _call: SetExpectedInterfaceSetCall;

  constructor(call: SetExpectedInterfaceSetCall) {
    this._call = call;
  }
}
